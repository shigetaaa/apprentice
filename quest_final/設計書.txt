ファイル構成
CardDeck.php　OK

CommonPlay.php　OK

Dealer.php

Player.php

Game.php

main.php





//ディーラー側　自動でメッセージと処理が実行できるようにする
//-------------------

//連想配列でカードと特典の対応表を作る　（カードの在庫クラス）
//最初のカードの一覧　連想配列でカード番号と枚数の対応表（例えば商品在庫を設定してそこから購入していく→在庫が減るのを参考にすると良さそう（カードの点数クラス）
//カード在庫からカードを取得すると残りのカードが減っていくメソッド
//ディーラーもカードを1枚引く。在庫から引く。点数を合計する。１枚目は画面に表示する。在庫から２枚目を引く。在庫から引く。合計する。２枚目はメッセージのみでカードの種類は表示しない。（残数からrandで出す？）
//プレイヤーがカードを１枚引く。在庫から引く。点数を合計する。引いたカードは画面に表示する。２回目１枚引く。在庫から引く。点数を合計する。引いたカードは画面に表示する。
//プレイヤーのカードの合計値をメッセージで出す。カードを引くかどうかメッセージ。y/n
//Y
//コンソールへの入力を読み込む。YかNで条件分岐。
//---Yの場合
//プレイヤーがカードを１枚引く。在庫から引く。点数を合計する。ここで条件分岐。
//---もし合計が21以上なら（if）
//プレイヤーのカードの合計値をメッセージで出す。GAME OVERを表示する。
//---それ以外なら(else)



//画面に表示されたカードの種類２枚をみて、yes/noで１枚追加するかを選ぶ（残数からrandで出す？）
//プレイヤー、１枚追加ごとに足していく。表示する。21を超えたらGAME OVERを表示する


//ディーラーの計算に使う
//合計が17以下の場合→カードを１枚追加する→合計する→17以上でストップ　ここでもし21以上ならGAME OVER （残数からrandで出す？） (if while)



//定数定義
#define CARD_MAX 52 //山札上限
#define SAFE 0 //手札21以下
#define U_BUST 1 //手札21オーバー
#define E_BUST -1 //手札21オーバー
#define USER 1 //ユーザーモード
#define ENEMY 2 //エネミーモード

//構造体宣言
typedef struct{
	int no;
	char mark;
}card_rec;

//クラス定義
class CardDeck[card_max]; //山札デッキクラス
class  BasePlayer[CARD_MAX]//基本のプレイヤー設定　継承親
class User[CARD_MAX]; //ユーザー（プレイヤー）クラス　継承子
class Dealer[CARD_MAX]; //ディーラークラス　継承子

class BasePlayer[CARD_MAX]; ★継承親
【要素】
・手札 List(Card)
・現在の点数  ※手札 List(Card)から計算して返却
・GameOverかどうか ※現在の点数が21を超えていればtrue
【メソッド】
・カードを引く

class User[CARD_MAX]; 継承子
【要素】
・手札 List(Card)
・現在の点数  ※手札 List(Card)から計算して返却
・GameOverかどうか ※現在の点数が21を超えていればtrue
【メソッド】
・カードを引く(ユーザー入力Y・Nによる、継続・終了の判定）

class Dealer[CARD_MAX]; //ディーラークラス　継承子
【要素】
・手札 List(Card)
・現在の点数  ※手札 List(Card)から計算して返却
・GameOverかどうか ※現在の点数が21を超えていればtrue
【メソッド】
・カードを引く(17以上になれば終了、それまでカードを引き続ける）




//グローバル変数宣言
card_state; //山札の先頭 いらないかも
card_point; //点数の判定
hand_count; //手札の枚数
dealer_count; /ディーラー手札の枚数
player_sum; //自分の手札の合計
dealer_sum; //ディーラーの手札の合計

//関数
system_cmd(); //ゲーム開始確認
game_main(); //ゲームメイン関数
game_init(); //ゲーム初期化
card_input(); //山札定義
card_shuffle(); //山札を切る
card_draw(int n,int mode); //カードを配る
game_cmd(); //ゲーム内行動選択
hand_output(int mode); //手札表示
dealer_main(); //ディーラーの行動選択
hand_check(int mode); //21以下か確認
game_judge(); //勝ち負け判定
